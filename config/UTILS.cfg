
[gcode_macro _TST_GLOB]
gcode:
	{% set global = printer["gcode_macro GLOBAL"] %}
	SAVE_GCODE_STATE name=tst_glob
	RESPOND TYPE=echo MSG='start test global'
	RESPOND TYPE=echo MSG="glob soak time = {global.bed_soak_time}"
	RESTORE_GCODE_STATE name=tst_glob

[gcode_macro G32]
gcode:
	{% set global = printer["gcode_macro GLOBAL"] %}
	SAVE_GCODE_STATE name=g32
	BED_MESH_CLEAR
	G28
	QUAD_GANTRY_LEVEL
	RESTORE_GCODE_STATE name=g32

[gcode_macro ZUP]
gcode:
	SAVE_GCODE_STATE name=zup
	{% set global = printer["gcode_macro GLOBAL"] %}
	SET_GCODE_OFFSET Z_ADJUST=0.01 MOVE=1
	RESTORE_GCODE_STATE name=zup

[gcode_macro ZDOWN]
gcode:
	SAVE_GCODE_STATE name=zdown
	{% set global = printer["gcode_macro GLOBAL"] %}
	SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1
	RESTORE_GCODE_STATE name=zdown

#####################################################################
#	Nozzle Scrubber + Nozzle Clean
#####################################################################
[gcode_macro CLEAN_NOZZLE]
variable_start_x: 107
variable_start_y: 298
variable_start_z: 3.5
variable_wipe_dist: -25
variable_wipe_qty: 10
variable_wipe_spd: 300
variable_raise_distance: 30
gcode:
	{% set purge = params.PURGE|default(0)|float %}
	{% set temp = params.TEMP|default(220)|float %}

	# save the gcode state before
	SAVE_GCODE_STATE name=mc_clean_nozzle
	SET_DISPLAY_TEXT MSG="Clean NOZZLE ({purge}mm, {temp}c)"

	# preheat
	{% if purge > 0 and printer.extruder.temperature < 180 %}
		SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	{% endif %}

	# Home if not homed
	{% if "xyz" not in printer.toolhead.homed_axes %}
		G28
	{% endif %}

	# Absolut coordiantes
	G90

	{% if purge > 0 %}
		SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp}
		TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp-1} MAXIMUM={temp+2}
		## Move Nozzle to start and 2mm deaper
		G1 X{start_x+5} Y{start_y} F6000
		G1 Z{start_z-1} F2000
		## Purge with relative coordinates and retrect 1mm
		G91
		G1 E{purge} F400
		G4 P1000
		G1 E-3 F100
		G90
	{% endif %}

	# Move nozzle to start position
	G1 X{start_x} Y{start_y} F6000
	G1 Z{start_z} F1500
	G4 P3000

	## Wipe nozzle
	{% for wipes in range(1, (wipe_qty + 1)) %}
		G1 X{start_x + wipe_dist} F{wipe_spd * 60}
		G1 Y{start_y - 1} F{wipe_spd * 60}
		G1 X{start_x} F{wipe_spd * 60}
	{% endfor %}

	## Raise and Retract Nozzle 
	G1 Z{raise_distance}
	
	# restore gcode-state from before
	RESTORE_GCODE_STATE name=mc_clean_nozzle

#####################################################################
#	Load & Unload
#####################################################################

[gcode_macro LOAD_FILAMENT]
gcode:
	{% set global = printer["gcode_macro GLOBAL"] %}
	SAVE_GCODE_STATE name=load_filament
	#filament_load # using the Orbiter2_SmartSensor filament_load Macro!
	M118 Disabled! Please just insert filament to start loading.
	RESTORE_GCODE_STATE name=load_filament
	
[gcode_macro UNLOAD_FILAMENT]
gcode:
	{% set global = printer["gcode_macro GLOBAL"] %}
	SAVE_GCODE_STATE name=unload_filament
	filament_unload # using the Orbiter2_SmartSensor filament_load Macro!
	RESTORE_GCODE_STATE name=unload_filament
	

#####################################################################
#   Bed-Type-Macros
#####################################################################

### DD If you want to add different plates remeber to lower the cases and dont use space. Instead use _
[gcode_macro CONFIGURE_BED_OFFSET]
gcode:
	{% set global = printer["gcode_macro GLOBAL"] %}
	{% set CURR_BED_TYPE = params.CURR_BED_TYPE %}

	{% if CURR_BED_TYPE == 'high_temp_plate' %}
		SET_GCODE_OFFSET Z_ADJUST=0.0
	{% elif CURR_BED_TYPE == 'textured_pei_plate' %}
		SET_GCODE_OFFSET Z_ADJUST=-0.100
	{% elif CURR_BED_TYPE == 'engineering_plate' %}
		SET_GCODE_OFFSET Z_ADJUST=-0.085 #BK: best guess till now... works poorly!
	{% else %}
		SET_GCODE_OFFSET Z_ADJUST=0.0
	{% endif %}

#####################################################################
#   Filament-Type-Macros
#####################################################################

[gcode_macro CONFIGURE_FILAMENT_OFFSET]
gcode:
	{% set global = printer["gcode_macro GLOBAL"] %}
	{% set FILAMENT_TYPE = params.FILAMENT_TYPE %}

	{% if FILAMENT_TYPE == 'PLA' %}  
		SET_GCODE_OFFSET Z_ADJUST=0.000
	{% elif FILAMENT_TYPE in ['PET','PETG','PCTG'] %}   
		# PETG Zoffset   
		SET_GCODE_OFFSET Z_ADJUST=0.035
	{% elif FILAMENT_TYPE in 'ASA' %}
		# ASA Zoffset
		SET_GCODE_OFFSET Z_ADJUST=0.060
	{% elif FILAMENT_TYPE in 'ABS' %}
		# ABS Zoffset
		SET_GCODE_OFFSET Z_ADJUST=0.020
	{% else %}   
		# Other kind of filament we reset to 0
		SET_GCODE_OFFSET Z_ADJUST=0.000
	{% endif %}