# This Macro collection gives a signal if the heated-bed is soakted with the target temp or not
# --------------------------------------------
# 
# - Its simple done over time, to be acacct over a time period of about 5min, see <target_soak_time>

[delayed_gcode HEAT_SOAK_LOOP]
initial_duration: 10
gcode:
	{% set loop_pause = 5 %}
	{% set loop_pause_ms = loop_pause * 1000 %}

	COUNTDOWN_TEMP_TIME DURATION={loop_pause_ms}

	{% if printer.print_stats.state|lower == "standby" %}
		UPDATE_DELAYED_GCODE ID=HEAT_SOAK_LOOP DURATION={loop_pause}
	{% endif %}



# Using x times from 30 to 110 in steps of 10
[gcode_macro COUNTDOWN_TEMP_TIME]
variable_temps:          [40,       50,    60,     70,     80,     90,     95,    100,    105]	# teperature at wich it needs to wait
variable_time_remaining: [60040, 60050, 180060, 300070, 300080, 300090, 300095, 300100, 300105] # time to wait in ms
variable_default_time: 	 [60040, 60050, 180060, 300070, 300080, 300090, 300095, 300100, 300105] # times to wich its resetting
gcode:
	{% set duration = params.DURATION|default(1000)|int %} # Numer of ms to count down at once
	{% set bed_target = printer['heater_bed'].target %}
    {% set new_time_remaining = [] %}

    {% for i in range(time_remaining | length) %}
        {% set update_time = time_remaining[i] %}
		{% set check_temp = temps[i] %}
		{% set bed_temp = printer['heater_bed'].temperature%}

		{% if bed_temp >= check_temp %}
			{% if time_remaining[i] - duration >= 0 %}
				{% set update_time = time_remaining[i] - duration %}
			{% else %}
				{% set update_time = 0 %}
			{% endif %}
		{% else %}
			{% set update_time = default_time[i] %}
		{% endif %}

		# Update the array
		{% set _ = new_time_remaining.append(update_time) %}

        #{action_respond_info("Index " ~ i ~ ": Original=" ~ new_time ~ ", New=" ~ (new_time - 1))}
    {% endfor %}

    SET_GCODE_VARIABLE MACRO=COUNTDOWN_TEMP_TIME VARIABLE=time_remaining VALUE="{ new_time_remaining }"
    #RESPOND PREFIX="Countdown" MSG="Updated time_remaining: { new_time_remaining }"


[gcode_macro GET_HEAT_SOAK]
variable_remaining_time: 300000
variable_remaining_index: 0
gcode:
	{% set target_temp = params.TARGET|int %}
	{% set remainings = printer['gcode_macro COUNTDOWN_TEMP_TIME'].time_remaining %}
	{% set temps = printer['gcode_macro COUNTDOWN_TEMP_TIME'].temps %}

    #RESPOND PREFIX="DBG:" MSG="target: {target_temp}"
    #RESPOND PREFIX="DBG:" MSG="remainings {remainings}"
    #RESPOND PREFIX="DBG:" MSG="temps {temps}"

	# get index:
	#{% for i in range(remainings | length) %}
	{% set index_list = [0] %}
	{% for i in range(remainings | length ) %}
		#RESPOND PREFIX="DBG:" MSG="[{i}] test t vs r: {target_temp} >= ? {temps[i]}"
		{% if target_temp >= temps[i] %}
			{% set _ = index_list.__setitem__(0, i) %}
			#RESPOND PREFIX="DBG:" MSG="true & set: index = {index_list[0]}"
		{% endif %}
	{% endfor %}

	{% set index = index_list[0] %}
	{% set r_time = remainings[index] %}

	# update self remaining_time variable
    SET_GCODE_VARIABLE MACRO=GET_HEAT_SOAK VARIABLE=remaining_time VALUE="{ r_time }"
    SET_GCODE_VARIABLE MACRO=GET_HEAT_SOAK VARIABLE=remaining_index VALUE="{ index }"

    #RESPOND PREFIX="dbg:" MSG="set time: { r_time }"
    #RESPOND PREFIX="dbg:" MSG="set idex: { index}"


[gcode_macro PRINT_HEAT_SOAK]
gcode:
	{% set remainings = printer['gcode_macro COUNTDOWN_TEMP_TIME'].time_remaining %}
	{% set temps = printer['gcode_macro COUNTDOWN_TEMP_TIME'].temps %}

    RESPOND PREFIX="HeatSoak" MSG="time in s: {remainings}"
    RESPOND PREFIX="At Temp " MSG="for tempÂ°: {temps}"


