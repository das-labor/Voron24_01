
[gcode_macro _TST_GLOB]
gcode:
	{% set global = printer["gcode_macro GLOBAL"] %}
	SAVE_GCODE_STATE name=tst_glob
	RESPOND TYPE=echo MSG='start test global'
	RESPOND TYPE=echo MSG="glob soak time = {global.bed_soak_time}"
	RESTORE_GCODE_STATE name=tst_glob

[gcode_macro G32]
gcode:
	{% set global = printer["gcode_macro GLOBAL"] %}
	SAVE_GCODE_STATE name=g32
	BED_MESH_CLEAR
	G28
	QUAD_GANTRY_LEVEL
	RESTORE_GCODE_STATE name=g32

[gcode_macro ZUP]
gcode:
	SAVE_GCODE_STATE name=zup
	{% set global = printer["gcode_macro GLOBAL"] %}
	SET_GCODE_OFFSET Z_ADJUST=0.01 MOVE=1
	RESTORE_GCODE_STATE name=zup

[gcode_macro ZDOWN]
gcode:
	SAVE_GCODE_STATE name=zdown
	{% set global = printer["gcode_macro GLOBAL"] %}
	SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1
	RESTORE_GCODE_STATE name=zdown

#####################################################################
#	Nozzle Scrubber + Nozzle Clean
#####################################################################
[gcode_macro CLEAN_NOZZLE]
variable_start_x: 107
variable_start_y: 298
variable_start_z: 3.5
variable_wipe_dist: -25
variable_wipe_qty: 10
variable_wipe_spd: 300
variable_raise_distance: 30
gcode:
	{% set purge = params.PURGE|default(0)|float %}
	{% set temp = params.TEMP|default(220)|float %}

	# save the gcode state before
	SAVE_GCODE_STATE name=mc_clean_nozzle
	SET_DISPLAY_TEXT MSG="Clean NOZZLE ({purge}mm, {temp}c)"

	# preheat
	{% if purge > 0 and printer.extruder.temperature < 180 %}
		SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	{% endif %}

	# Home if not homed
	{% if "xyz" not in printer.toolhead.homed_axes %}
		G28
	{% endif %}

	# Absolut coordiantes
	G90

	{% if purge > 0 %}
		SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp}
		TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp-1} MAXIMUM={temp+2}
		## Move Nozzle to start and 2mm deaper
		G1 X{start_x+5} Y{start_y} F6000
		G1 Z{start_z-1} F2000
		## Purge with relative coordinates and retrect 1mm
		G91
		G1 E{purge} F400
		G4 P1000
		G1 E-3 F100
		G90
	{% endif %}

	# Move nozzle to start position
	G1 X{start_x} Y{start_y} F6000
	G1 Z{start_z} F1500
	G4 P3000

	## Wipe nozzle
	{% for wipes in range(1, (wipe_qty + 1)) %}
		G1 X{start_x + wipe_dist} F{wipe_spd * 60}
		G1 Y{start_y - 1} F{wipe_spd * 60}
		G1 X{start_x} F{wipe_spd * 60}
	{% endfor %}

	## Raise and Retract Nozzle 
	G1 Z{raise_distance}
	
	# restore gcode-state from before
	RESTORE_GCODE_STATE name=mc_clean_nozzle

[gcode_macro SMART_HOME]
gcode:
	{% set qgl = params.QGL|default(0)|int %}
	SAVE_GCODE_STATE name=smart_homing

	{% if 'xyz' not in printer.toolhead.homed_axes %}
		STATUS_HOMING
		RESPOND type=echo MSG="Homing"
		G28 Y
		G0 F3000 Y250
		G28 X Z
	{% endif %}
	# do QGL if true
	{% if qgl %}
		STATUS_LEVELING
		quad_gantry_level
		G28 Z
	{% endif %}
	# do QGL anyway if its not done
    {% if printer.quad_gantry_level.applied|lower == 'false' %}
		STATUS_LEVELING
		RESPOND type=echo MSG="QGL"     # Displays info
		quad_gantry_level               # Levels the buildplate via QGL
		G28 Z                           # Homes Z again after QGL
	{% endif %}

	RESTORE_GCODE_STATE name=smart_homing
	


# ZIGZAG Movement by ONE Period X times
# it Moves: from Start(s) to End(e)
#x: 0 1 2 3 4 
#        /-\
#   s   /   e-end_x
#    \-/
[gcode_macro NOZZLE_ZIGZAG]
gcode:
	{% set dir = params.DIR|default(1)|int %} 			# +1 is to the Right and -1 to the left
	{% set whipes = params.WHIPES|default(6)|int %}		# number of whipe passes
	{% set speed = params.SPEED|default(3500)|int %}	# F(speed) of the whipes
	{% set hub = params.HUB|default(8)|float%}			# Amplitude in mm on Y-Aches
	{% set len_x = params.LEN_X|default(8)|float%}		# Distance for each Period in X
	{% set end_x = params.END_X|default(0)|float%}		# Distance X moves to from 'e' to end_x possiton
	
	{% set neg_hub = (-1 * hub) %}
	{% set neg = -1 %}

	SAVE_GCODE_STATE name=zigzag
	RESPOND type=echo MSG='ZigZag: dir={dir}, whipes={whipes} sped={speed}, hub={hub}, len_x={len_x}, end_x={end_x}'

	G91 									# Relative Coordinates
	{% for whipe in range(whipes) %}
		G0 F{speed} X{dir * (len_x/4)} Y{(-1)*(hub/2)}	# X2 Y-4	#to e possition
		G0 F{speed} X{dir * (1)}						# X1		#Plato
		G0 F{speed} X{dir * (len_x/2)} Y{hub}			# X4 Y8
		G0 F{speed} X{dir * (1)}						# X1		#Plato
		G0 F{speed} X{dir * (len_x/4)} Y{(-1)*(hub/2)}	# X2 Y-4	#to e possition
	{% endfor %}
	G0 F{speed} X{dir * (end_x)} Y0			# to end_x possition

	RESTORE_GCODE_STATE name=zigzag

[gcode_macro WHIPE_NOZZLE]
	variable_start_x: 50
	variable_start_y: 306
	variable_start_z: 4.3			# old Braze Brush
	variable_save_z: 10
	variable_whipe_direction: (-1) 	# X-Achsis direction factor!
	variable_whipe_hub: 4			# Y-Achsis amplitude distance
	variable_whipe_frq: 1 			# frequency of Xmm
	variable_whipe_whipes: 12
	variable_whipe_move_after: 10	# Move in X after whiped
	variable_whipe_speed: 4000
	#variable_whipe_dist: 35			# Whiping distance before move_after
gcode:
	{% set purge = params.PURGE|default(0)|float %}
	{% set purge_temp = params.PURGE_TEMP|default(220)|float %}
	{% set hotend_temp = params.HOTEND_TEMP|default(150)|float %}

	# save the gcode state before
	SAVE_GCODE_STATE name=whipe
	G90

	# Info print
	SET_DISPLAY_TEXT MSG="Clean NOZZLE ({purge}mm, {purge_temp}c)"

	# PRE-Heat the NOZZLE
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET={hotend_temp}

	# Home if not homed
	{% if "xyz" not in printer.toolhead.homed_axes %}
		STATUS_HOMING
		G28
	{% endif %}
	
	# Wait for Nozzle heating
	STATUS_HEATING
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={hotend_temp - 1} MAXIMUM={hotend_temp + 3}

	## REAL Start Cleaning
	STATUS_CLEANING

	# Move nozzle to start position
	G1 Z{save_z} F1500
	G1 X{start_x} Y{start_y} F6000
	G4 P3000

	# PURGE
	{% if purge > 0.1 %}
		RESPOND type=echo MSG="Do Purging:"
		G4 P3000
		SET_HEATER_TEMPERATURE HEATER=extruder TARGET={purge_temp}
		TEMPERATURE_WAIT SENSOR=extruder MINIMUM={purge_temp-1} MAXIMUM={purge_temp+2}
		SAVE_GCODE_STATE name=whipe_purge
		## Purge with relative coordinates and retrect 1mm
		G91
		G1 E{purge} F400
		G4 P500	# 1/2s wait
		G1 E-3 F100
		# Let it cool down again, for less ooze
		RESTORE_GCODE_STATE name=whipe_purge
		SET_HEATER_TEMPERATURE HEATER=extruder TARGET={hotend_temp}
		TEMPERATURE_WAIT SENSOR=extruder MINIMUM={hotend_temp - 1} MAXIMUM={hotend_temp + 3}
	{% endif %}

	## Wipe nozzle
	#{% set whipes = whipe_dist/whipe_frq %}
	NOZZLE_ZIGZAG DIR={whipe_direction} WHIPES={whipe_whipes} SPEED={whipe_speed} HUB={whipe_hub} LEN_X={whipe_frq} END_X={whipe_move_after}
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET={hotend_temp}


	## Raise and Retract Nozzle 
	#G1 Z{save_z}
	RESTORE_GCODE_STATE name=whipe



[gcode_macro WHIPE_NOZZLE_RESUME]
	variable_save_y: 295
	variable_save_x: 80
	variable_speed: 4000
gcode:
	{% set hotend_temp = params.HOTEND_TEMP|float %}
	SAVE_GCODE_STATE name=nozzle_whipe_resume

	STATUS_HEATING
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET={hotend_temp}
	G4 P500
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={hotend_temp-2} MAXIMUM={hotend_temp+2}

	STATUS_CLEANING
	G90
	G0 F{speed} Y{save_y}
	G0 F{speed} X{save_x}

	RESTORE_GCODE_STATE name=nozzle_whipe_resume




#####################################################################
#	Load & Unload
#####################################################################

[gcode_macro LOAD_FILAMENT]
gcode:
	{% set global = printer["gcode_macro GLOBAL"] %}
	SAVE_GCODE_STATE name=load_filament
	#filament_load # using the Orbiter2_SmartSensor filament_load Macro!
	M118 Disabled! Please just insert filament to start loading.
	RESTORE_GCODE_STATE name=load_filament
	
[gcode_macro UNLOAD_FILAMENT]
gcode:
	{% set global = printer["gcode_macro GLOBAL"] %}
	SAVE_GCODE_STATE name=unload_filament
	filament_unload # using the Orbiter2_SmartSensor filament_load Macro!
	RESTORE_GCODE_STATE name=unload_filament


[gcode_macro _new_CANCEL_PRINT]
#rename_existing: CANCEL_PRINT_BASE  #TODO: check for this fishiy Base macro!!!
gcode:
   M220 S100 ; Reset Speed factor override percentage to default (100%)
   M221 S100 ; Reset Extrude factor override percentage to default (100%)
   G91 ; Set coordinates to relative
   {% if printer.extruder.temperature >= 170 %}
      G1 F1800 E-1 ; Retract filament 3 mm to prevent oozing
   {% endif %}
   ;if all axis are homed, lift the hotend to leave room for hot filament to ooze and to keep it clear of the bed.
   {% if printer.toolhead.homed_axes == "xyz" %}
      G1 F6000 Z10 ; Move Z Axis up 10 mm to allow filament ooze freely
      G90 ; Set coordinates to absolute
      G1 X10 Y270 F3000 ; Move Printer Head Out of Way
      ; M84 ; Disable stepper motors - don't so the gantry stays aligned
   {% endif %}
   ;set part fan speed to zero.
   M106 S0
   ;bed and hotend are left at the print temps in case I want to restart.
   
   #CLEAR_PAUSE
   #BASE_CANCEL_PRINT


	

#####################################################################
#   Bed-Type-Macros
#####################################################################

### DD If you want to add different plates remeber to lower the cases and dont use space. Instead use _
[gcode_macro CONFIGURE_BED_OFFSET]
gcode:
	{% set global = printer["gcode_macro GLOBAL"] %}
	{% set CURR_BED_TYPE = params.CURR_BED_TYPE %}

	{% if CURR_BED_TYPE == 'high_temp_plate' %}
		SET_GCODE_OFFSET Z_ADJUST=0.0

	{% elif CURR_BED_TYPE == 'textured_pei_plate' %}
		SET_GCODE_OFFSET Z_ADJUST=-0.075				#BK: testet with PLA, DONE

	{% elif CURR_BED_TYPE == 'engineering_plate' %}
		SET_GCODE_OFFSET Z_ADJUST=-0.040 				#BK: best guess till now... works poorly!

	{% else %}
		SET_GCODE_OFFSET Z_ADJUST=0.0
	{% endif %}

#####################################################################
#   Filament-Type-Macros
#####################################################################

[gcode_macro CONFIGURE_FILAMENT_OFFSET]
gcode:
	{% set global = printer["gcode_macro GLOBAL"] %}
	{% set FILAMENT_TYPE = params.FILAMENT_TYPE %}

	{% if FILAMENT_TYPE == 'PLA' %}  
		SET_GCODE_OFFSET Z_ADJUST=0.000

	{% elif FILAMENT_TYPE in ['PET','PETG','PCTG'] %}	#PETG
		SET_GCODE_OFFSET Z_ADJUST=-0.065

	{% elif FILAMENT_TYPE in 'ASA' %}					#ASA
		SET_GCODE_OFFSET Z_ADJUST=-0.060

	{% elif FILAMENT_TYPE in 'ABS' %}					#ABS
		SET_GCODE_OFFSET Z_ADJUST=0.020

	{% else %}   
		SET_GCODE_OFFSET Z_ADJUST=0.000
	{% endif %}