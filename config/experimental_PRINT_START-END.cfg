[gcode_macro _experimental_PRINT_START]
gcode:
	{% set global = printer["gcode_macro GLOBAL"] %}
	# This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
	{% set target_bed = params.BED|int %}
	{% set current_bed = printer.heater_bed.temperature %}
	{% set target_extruder = params.EXTRUDER|int %}
	{% set target_chamber = params.CHAMBER|default("40")|int %}
	{% set CURR_BED_TYPE = params.CURR_BED_TYPE|lower|replace(" ", "_") %}  #|lower|replace(" ", "_") is there because otherwise Klipper wont understand the string
	{% set FILAMENT_TYPE = params.FILAMENT_TYPE %}
	{% set BED_wait_time = params.BED_WAIT_TIME|default(30)|int %}
	{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

	# Debug-Output: the given parameters
	RESPOND type=echo MSG='Start: BED={target_bed} EXTRUDER={target_extruder} CHAMBER={target_chamber} CURR_BED_TYPE={CURR_BED_TYPE} FILAMENT_TYPE={FILAMENT_TYPE} BED_WAIT_TIME={BED_wait_time}'

	# Set Temperature in Advice (non blocking commands!)
  	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={target_bed}
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150

	# Homing
	# - if one axxis is out of home, home all, else no homing required
	{% if printer.homed_axes != 'XYZ' %}
		G28					#Home All Axes
	{% else %}
		RESPOND type=echo MSG="Printer was already homed... continue!"
	{% endif %}
	# - Use Absolut coordinates
	G90

	## Uncomment for bed mesh (1 of 2)
	BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

	RESPOND type=echo MSG="Bed: {target_bed}c"           # Displays info
	STATUS_HEATING                                      # Sets SB-leds to heating-mode
	G1 X{x_wait} Y{y_wait} Z50 F9000                    # Goes to center of the bed
	#M190 S{target_bed}									# Sets the target temp for the bed (blocking)
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={target_bed-2} MAXIMUM={target_bed+5} # Wait for <target_bed> temperature

	# BED Sok-time
	# TODO: Bed sok-time neads to be checkt regular in an global counter, this macro sould wait for the remaining time!
	## G4 P{global.bed_soak_time}	# For now global soak time!
	G4 P{10000} #for now: just wait 10 dummy seconds
	# BK Vaiable Bed-Soak dependend on which temp the bed was when calling PRINT_START
	#{% if current_bed < target_bed - 10 %}
	#	RESPOND type=echo MSG="Soak for  5 min"
	#	G4 P{ 5 * 60 * 1000 }
	#{% else %}
	#	RESPOND type=echo MSG="Soak for 12 sec"
	#	G4 P{ 0.2 * 60 * 1000 }
	#{% endif %}

	# Checks if the bed temp is higher than 90c - if so then trigger a heatsoak. DD AFTER INSTALLNG CHAMBER TEMP & BEDFANS
	#{% if params.BED|int > 90 %}
	#RESPOND type=echo MSG="Bed: {target_bed}c"           # Displays info
	#STATUS_HEATING                                      # Sets SB-leds to heating-mode
	#M106 S255                                           # Turns on the PT-fan

	#G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
	#M190 S{target_bed}                                  # Sets the target temp for the bed
	#RESPOND type=echo MSG="Heatsoak: {target_chamber}c"  # Displays info
	#SET_HEATER_TEMPERATURE HEATER=<heater_name> [TARGET=<target_temperature>]
	#TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

	# Turn off BedFans because of Heat deviation
	#SET_FAN_SPEED FAN=BedFans SPEED=0
	#SET_FAN_SPEED FAN=Nevermore SPEED=0

	# QGL
    {% if printer.quad_gantry_level.applied|lower == 'false' %}
		RESPOND type=echo MSG="QGL"     # Displays info
		quad_gantry_level               # Levels the buildplate via QGL
		G28 Z                           # Homes Z again after QGL
	{% else %}
		RESPOND type=echo MSG="already QGL-ed - continue"
		G4 P(3000) # wait 3s
	{% endif %}

	#Bed Mesh
	RESPOND type=echo MSG="Bed mesh"		# Displays info
	bed_mesh_calibrate					# Starts bed mesh

	# To turn Bed Fans if needed back on
	#M190 S{target_bed}

	# Turns on the nevermore DD reactivate when installed
	#SET_PIN PIN=nevermore VALUE=1                      
	#SET_FAN_SPEED FAN=Nevermore SPEED=1

	# We set our offset based on filament and Bed type
	CONFIGURE_BED_OFFSET CURR_BED_TYPE="{CURR_BED_TYPE}"
	CONFIGURE_FILAMENT_OFFSET FILAMENT_TYPE={FILAMENT_TYPE}       # Sets Z-Offset addition due to CONFIGURE_FILAMENT_OFFSET Macro

	# Heats up the nozzle up to target via data from slicer
	RESPOND type=echo MSG="Hotend: {target_extruder}c"             # Displays info
	G1 X{x_wait} Y{y_wait} Z35 F9000                             # Goes to center of the bed
	G1 X107 Y302 Z15 F9000
	# Wait for Nozzle on target temperature
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET={target_extruder}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={target_extruder-1} MAXIMUM={target_extruder+2}


	# Clean Nozzle
	## TODO: add Purge-amount in CLEAN_NOZZLE macro!
	RESPOND type=echo MSG="Clean Nozzle"
	CLEAN_NOZZLE PURGE=0 TEMP={target_extruder}

	# Gets ready to print by doing a purge line and updating the SB-leds
	RESPOND type=echo MSG="Print Start after Line-Purge"
	LINE_PURGE

[gcode_macro _experimental_PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
# TODO: Park the toolhead in the rear and minimal 20mm above current possition (if possible)
gcode:
	{% set global = printer["gcode_macro GLOBAL"] %}
	M400                           ; wait for buffer to clear
	G92 E0                         ; zero the extruder
	G1 E-1.0 F3600                 ; retract filament
	G91                            ; relative positioning
	G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
	TURN_OFF_HEATERS
	M107                           ; turn off fan
	G1 Z2 F3000                    ; move nozzle up 2mm
	G90                            ; absolute positioning

[gcode_macro _dbg_status]
gcode:
	# ----- HOMING ------------------------------------------
    # Home if not already homed and park the head near the center front
    {% if not 'xyz' in printer.toolhead.homed_axes %}
		RESPOND type=echo MSG="is not Homed :("
	{% else %}
        RESPOND type=echo MSG="is Homed :)"
    {% endif %}


    # ----- QUAD GANTRY LEVELING -----------------------------
    {% if printer.quad_gantry_level.applied|lower == 'false' %}
        RESPOND type=echo MSG="is not QGL-ed"
	{% else %}
        RESPOND type=echo MSG="is QGL-ed"
    {% endif %}

	# ----- OSS Status
	{% if not printer["filament_switch_sensor O2_sensor"].filament_detected %}
		RESPOND type=echo MSG="Filament not loaded"
	{% else %}
		RESPOND type=echo MSG="Filament loaded"
	{% endif %}