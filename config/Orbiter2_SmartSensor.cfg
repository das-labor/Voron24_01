#################################################################################################################
################################# Orbiter Sensor CONFIGURATION ##################################################
#################################################################################################################

#config file version v3.0.02
#release date: 22.12.2023

# PAUSE and RESUME macros are defined at the end of this config file.
# If you prefer using your own p[lease delete them, otherwise define parking position below.

#################################################################################################################
################################# CHANGE HERE MACRO CONFIGURABLES################################################
#################################################################################################################

[gcode_macro _SENSOR_VARIABLES]         # change here macro configurables, enable disable functions!*************************
variable_filament_load_temp     :220    # temperature to heat up hotend for filament loading, default is 235
variable_filament_unload_temp   :220    # temperature to heat up hotend for filament un-loading, default is 185
variable_filament_load_min_temp :220    # minimum hotend set temperature allowed in filament load macro, default is 190
variable_nozzle_purge_length    :130    # filament extrude amount during load sequenc, hotend purge from old filament, default is 200
variable_nozzle_purge_speed     :450    # filament extrude speed in mm/min adjust this value lower if flow is too high and extruder skips during loading, default is 300
variable_unload_distance        :130    # filament retract distance for unload procedure. this length shall be long enough to extract the filament above the drive gears
variable_disable_autoload       :False  # disable filament autoload feature by setting this variable True
variable_disable_runnout        :False  # disable runnout by setting this variable True
variable_disable_autochange     :False  # disable filament auto change after runnout detection
variable_disable_tangle         :True   # disable tangle by setting this variable True
variable_disable_autounload     :False  # disable auto unload filament by setting this variable to True
variable_enable_beep            :False  # uses M300 sound feature, set it True to enable
variable_park_position_x        :175    # edit your X parking position here for pause macro trigerred by runnout
variable_park_position_y        :10     # edit your Y parking position here for pause macro trigerred by runnout
variable_park_lift_z            :10     # edit your Z lift amount for parking position here, default is 10
Variable_park_retraction        :4      # edit your retraction amount for parking, default is 1
gcode:


#///////////////////////////filament sensor button macros/////////////////////////////////////////////////
#[gcode_button filament_sense]
#pin: !orbitoolO2:PA9 # remove the negation "!" for sensor v1 - use just PA9 as example
#pin: !orbitoolO2:PA13 # remove the negation "!" for sensor v1 - use just PA9 as example
#press_gcode: # sensor released  -runnout detected!

#release_gcode: #gcode macro for filament auto-load, sensor pressed
  #filament_load_init

[filament_switch_sensor O2_sensor]
switch_pin: can0:AUX0
pause_on_runout: False
runout_gcode: runnout_init
insert_gcode: filament_load_init
event_delay: 1.0
pause_delay: 0.1

#********************************************************************************************************

#////////////////////////////////////////Filament Unload macros/////////////////////////////////////////////////
[gcode_button filament_unload]
pin: can0:AUX1 # remove the negation "!" for sensor v1 - use just PA9 as example
press_gcode:  # filament unload procedure
  unload_tangle_init
release_gcode: # do not add any macro call here

#################################################################################################################################
####################################### DO NOT CHANGE ANYTHING BELOW THIS LINE!!! ###############################################
#################################################################################################################################
####################################### UNLESS YOU KNOW WHAT YOU ARE DOING OR YOU ARE BORED AND NEED TO DO SOMETHING OR YOU ARE ALONE AND NEED SOMETHING TO MESS UP YOUR LIFE OR YOU CAN DO IT BETTER THAN ME OR YOU ARE A REAL SMARTASS OR JUST BECAUSE YOU CAN OR YOU RUN OUT OF BEAR OR HAS NOTHING BETTER TO DO OR ANY UNREASONABLE REASON
#################################################################################################################################

[respond]
default_type: echo

[force_move]
enable_force_move: True

[gcode_macro runnout_init]
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
  {% if(sensor.disable_runnout|lower == 'false') %}
      filament_change_state1
  {% else %}
    M118 Filament runnout is disabled in the sensor config file!
  {% endif %}

[gcode_macro filament_change_state1]
variable_changebusy: 0
variable_temp_target: 0
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
  {% if changebusy == 0 %}
    PAUSE # call printer pause macro
    M118 Filament runnout!
    {% if (sensor.disable_autochange|lower == 'false') %}
      SET_GCODE_VARIABLE MACRO=filament_change_state1 VARIABLE=changebusy VALUE=1
      filament_change_state2   # comment this line if you do not want to automatically unload filament in case there is a runnout detected.
    {% endif %}
  {% endif %}

[gcode_macro filament_change_state2]
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
  SET_GCODE_VARIABLE MACRO=unload_tangle_init VARIABLE=loadbusy VALUE=1
  {% if (sensor.enable_beep|lower == 'true') %}
    M300 # beep sound
  {% endif %}
  M118 Unloading filament...
  M83
  G92 E0
  # {% if printer[printer.toolhead.extruder].temperature < 185 %} # hardcoded threshold
  {% if (printer.extruder.can_extrude|lower != 'true')%} # checing for minimum extrusion temperature
        # check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder config (to about 185)
      M118 Hotend heating!
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={sensor.filament_unload_temp} # restore user temp if it was set before loading
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={sensor.filament_unload_temp} #wait for reaching filament unload temp
      {% endif %}
  {% if(printer.extruder.target == 0) %} # checing for set temperature if is zero than set to 200 / hotend hot but cooling due to set target temp 0
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={sensor.filament_unload_temp} # restore user temp if it was set before loading
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={sensor.filament_unload_temp} #wait for reaching filament unload temp
  {% endif %}
  G0 E-5 F3600 	#extract filament to cold end
  G4 P2000 # wait for two seconds
  G0 E5 F3600 # push the filament back
  G0 E-5 F3600 	#extract filament to cold end
  G0 E-{sensor.unload_distance} F300	# continue extraction slow allow filament to be cooled enough before reaches the gears
  M400
  M118 Load new filament! Wait until is loaded, then resume printing.
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0 # swicth off heater
  UPDATE_DELAYED_GCODE ID=clear_loadbusy DURATION=0.5
  UPDATE_DELAYED_GCODE ID=clear_changebusy DURATION=0.5

[gcode_macro filament_load_init]
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
  {% if (printer.print_stats.state != "printing") %}
    {% if(sensor.disable_autoload|lower == 'false') %}
      SET_GCODE_VARIABLE MACRO=unload_tangle_init VARIABLE=loadbusy VALUE=1
      filament_load
    {% else %}
    M118 Filament auto-load is disabled in the sensor config file!
    {% endif %}
  {% else %}
    M118 Printing! Can not load filament right now!
  {% endif %}
 # SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=filamentpresent VALUE=1
  #UPDATE_DELAYED_GCODE ID=clear_changebusy DURATION=2

[gcode_macro filament_load]
variable_USER_TEMP: 0
variable_LOAD_TEMP: 0
gcode:
    {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
    {% set USER_TEMP = printer.extruder.target %} # save user set temperature before loading
    {% set LOAD_TEMP = 0 %}
    SAVE_GCODE_STATE name=o2_filament_load

    {% if (printer.extruder.can_extrude|lower != 'true') or (printer.extruder.target < sensor.filament_load_min_temp) %} # checking for minimum extrusion temperature
      # check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder config (to about 185)
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={sensor.filament_load_temp} # set user defined load temperature
      {% set LOAD_TEMP = sensor.filament_load_temp %} # save user set temperature before loading
      M118 Hotend heating!
    {% endif %}

    {% if (sensor.enable_beep|lower == 'true') %}
      M300 # beep sound
    {% endif %}

    M118 Filament loading!
    M82           # set extruder to absolute mode
    G92 E0        # set extruder position to 0
    G4 P1500      # wait for 1.5 seconds

    FORCE_MOVE STEPPER=extruder DISTANCE=15 VELOCITY=10 ACCEL=1000  # load filament inside the gears force move needs to be enabled
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={LOAD_TEMP} # wait for reaching set temperature
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={USER_TEMP} # wait for reaching set temperature

    G1 E{sensor.nozzle_purge_length} F{sensor.nozzle_purge_speed} # extrude preconfigured purge length
    M400 # wait to complete nozzle purge

    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={USER_TEMP} # restore user temp if it was set before loading
    M118 Filament load complete!
    
    RESTORE_GCODE_STATE name=o2_filament_load

    UPDATE_DELAYED_GCODE ID=clear_loadbusy DURATION=1 # bk: default was 2 secons


#############################################END filament auto load macro section END***********************************************************
#############################################filament auto unload and Tangle macro section*****************************************************************
[gcode_macro unload_tangle_init]
variable_loadbusy: 0
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
  {% if (printer.print_stats.state == "printing") %} # filament tangle detection during printing
    {% if(sensor.disable_tangle|lower == 'false') %} # run tangle detection macro if enabled
      filament_tangle
    {% else %} #filament tangle disabled send message to console
      M118 Filament tangle detected, action disabled!
    {% endif %}
  {% else %} #filament unload button pressed
      {% if (printer.print_stats.state != "paused" and loadbusy == 0) %} #enable unload if not printing and not paused
        {% if(sensor.disable_autounload|lower == 'false') %} # run unload macro if enabled
          filament_unload
        {% endif %}
      {% endif %}
  {% endif %}

[gcode_macro filament_unload]
#variable_filamentpresent: 0
gcode:
    {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}

      SAVE_GCODE_STATE name=o2_filament_unload
      {% if (sensor.enable_beep|lower == 'true') %}
        M300 # beep sound
      {% endif %}
      M118 Filament unloading!
      M83                                 # Relative extrusion distance
      G92 E0                              # set Extruder position to 0
      {% if (printer.extruder.can_extrude|lower != 'true')%} # checing for minimum extrusion temperature
        # check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder config (to about 185)
        M118 Hotend heating!
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={sensor.filament_unload_temp} # restore user temp if it was set before loading
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={sensor.filament_unload_temp} # wait for reaching configured unload temperature
      {% endif %}
      {% if(printer.extruder.target == 0) %}
        # checing for set temperature if is zero than set to 185 / hotend hot but cooling due to set target temp 0
        M118 Hot but Cooling... TEMP_WAIT for {sensor.filament_unload_temp}°C !
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={sensor.filament_unload_temp} # restore user temp if it was set before loading
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={sensor.filament_unload_temp} # wait for reaching configured unload temperature
      {% endif %}
      G0 E20 F500                         # extruder 20mm of filament before extracting
      G0 E-5 F3600 	                      # retract filament to cold end
      G4 P2000                            # wait for two seconds
      G0 E5.5 F3600                         # push the filament back //default was 6mm
      G0 E-10 F3600 	                    # retract filament to cold end
      G0 E-{sensor.unload_distance} F300  # continue extraction slow allow filament to be cooled enough before reaches the gears
      M104 S0 T0                          # extruder temp to 0
      M400                                # wait to complete unload
      M118 Filament unload complete!
      RESTORE_GCODE_STATE name=o2_filament_unload

[gcode_macro filament_tangle]
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
  M118 Filament tangle detected, print paused!
  {% if (sensor.enable_beep|lower == 'true') %}
    M300 # beep sound
  {% endif %}
  PAUSE


#############################################END filament auto unload macro section END***********************************************************

[delayed_gcode clear_unloadbusy]
gcode:
  SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=unloadbusy VALUE=0
  #M118 Clear Unload busy!

[delayed_gcode clear_changebusy]
gcode:
  SET_GCODE_VARIABLE MACRO=filament_change_state1 VARIABLE=changebusy VALUE=0
  #M118 Clear Load busy!

[delayed_gcode clear_loadbusy]
gcode:
  SET_GCODE_VARIABLE MACRO=unload_tangle_init VARIABLE=loadbusy VALUE=0
  #M118 Clear Load busy!
